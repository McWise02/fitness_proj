{
  "openapi": "3.0.3",
  "info": {
    "title": "Fitness Finder API",
    "version": "1.0.0",
    "description": "Simple Swagger spec for Gyms and Machines."
  },
  "externalDocs": {
    "description": "Login with GitHub",
    "url": "/auth/github?returnTo=/api-docs"
  },
  "servers": [
    { "url": "https://fitness-proj.onrender.com", "description": "Local dev" }
  ],
  "tags": [
    { "name": "Gyms" },
    { "name": "Machines" },
    { "name": "Trainers" },
    { "name": "Users" }

  ],
  "paths": {
    "/gyms": {
      "post": {
        "tags": ["Gyms"],
        "summary": "Create a gym",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GymCreate" },
              "examples": {
                "default": {
                  "value": {
                    "name": "Iron Temple",
                    "city": "Frankfurt",
                    "country": "Germany",
                    "location": { "type": "Point", "coordinates": [8.6821, 50.1109] },
                    "amenities": ["sauna", "wifi", "open_24_7"],
                    "openingHours": [
                      { "day": "mon", "open": "06:00", "close": "22:00" }
                    ],
                    "machines": [
                      { "machine": "60f5c3c4f13a3b6b6b6b6b6b", "quantity": 4 }
                    ],
                    "priceTier": "$$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gym created",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GymResponse" } } }
          },
          "400": { "description": "Validation error" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/auth/{id}": {
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user by ID",
        "operationId": "deleteUserById",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/IdParam" }
        ],
        "responses": {
          "200": {
            "description": "User deleted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteResponse" },
                "examples": {
                  "ok": {
                    "value": { "message": "User deleted", "id": "64a7f0f4f0f0f0f0f0f0f0f9" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "badId": { "value": { "message": "Invalid user id" } }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "notFound": { "value": { "message": "User not found" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "serverErr": {
                    "value": { "message": "Error deleting user", "error": "db error details" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/update-me": {
      "put": {
        "summary": "Update current user (identified by githubId in session)",
        "description": "Updates profile fields for the currently authenticated user. Authentication is via session cookie; the server resolves the user by the githubId stored in the session.",
        "tags": ["Users"],
        "security": [{ "cookieAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "firstName": { "type": "string", "example": "Micah" },
                  "lastName": { "type": "string", "example": "Brown" },
                  "email": { "type": "string", "format": "email", "example": "micah@example.com" },
                  "goals": { "type": "array", "items": { "type": "string" }, "example": ["Lose weight", "Run 5k"] },
                  "preferredWorkoutTimes": { "type": "array", "items": { "type": "string" }, "example": ["morning", "evening"] },
                  "city": { "type": "string", "example": "Frankfurt" },
                  "country": { "type": "string", "example": "DE" },
                  "avatarUrl": { "type": "string", "format": "uri", "example": "https://avatars.githubusercontent.com/u/12345" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated." },
          "401": { "description": "Not authenticated (missing githubId in session)." },
          "404": { "description": "User not found for this githubId." },
          "500": { "description": "Internal server error." }
        }
      }
    },
     "/auth/me": {
    "get": {
      "tags": ["Users"],
      "summary": "Get current OAuth session info (for prefill)",
      "description": "Returns minimal GitHub session data used to prefill the signup form. Requires active session.",
      "security": [{ "cookieAuth": [] }],
      "responses": {
        "200": {
          "description": "Session data",
          "content": {
            "application/json": {
              "examples": {
                "default": {
                  "value": {
                    "ok": true,
                    "user": {
                      "id": "123456",
                      "username": "octocat",
                      "displayName": "Mona Lisa",
                      "avatar": "https://avatars.githubusercontent.com/u/583231?v=4",
                      "emails": [{ "value": "octo@example.com" }]
                    }
                  }
                }
              }
            }
          }
        },
        "401": { "description": "Unauthorized (no OAuth session)" }
      }
    }
  },

  "/auth/complete-profile": {
    "post": {
      "tags": ["Users"],
      "summary": "Complete profile (create/update User)",
      "description": "Creates or updates your application User document after GitHub login, then redirects to /api-docs. In Swagger, response will be a 302 or 200 depending on your setup.",
      "security": [{ "cookieAuth": [] }],
      "requestBody": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": { "$ref": "#/components/schemas/UserProfileCompletion" },
            "examples": {
              "default": {
                "value": {
                  "firstName": "Mona",
                  "lastName": "Lisa",
                  "email": "octo@example.com",
                  "password": "supersecret",
                  "goals": "strength, mobility",
                  "preferredWorkoutTimes": "morning",
                  "city": "Frankfurt",
                  "country": "Germany"
                }
              }
            }
          },
          "application/json": {
            "schema": { "$ref": "#/components/schemas/UserProfileCompletion" }
          }
        }
      },
      "responses": {
        "302": { "description": "Redirect to /api-docs on success" },
        "200": { "description": "OK (if not redirecting in test environment)" },
        "400": { "description": "Missing required fields" },
        "401": { "description": "Unauthorized (no OAuth session)" },
        "500": { "description": "Server error" }
      }
    }
  },

  "/auth/logout": {
    "post": {
      "tags": ["Users"],
      "summary": "Logout",
      "description": "Clears the session and cookie.",
      "security": [{ "cookieAuth": [] }],
      "responses": {
        "200": {
          "description": "Logged out",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BasicOkResponse" },
              "examples": { "default": { "value": { "ok": true } } }
            }
          }
        }
      }
    }
  },
    "/gyms/{id}": {
      "get": {
        "tags": ["Gyms"],
        "summary": "Get a gym by ID",
        "parameters": [{ "$ref": "#/components/parameters/IdParam" }],
        "responses": {
          "200": { "description": "Gym object"},
          "404": { "description": "Not found" },
          "400": { "description": "Invalid ID" }
        }
      },
      "put": {
        "tags": ["Gyms"],
        "summary": "Update a gym",
        "parameters": [{ "$ref": "#/components/parameters/IdParam" }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GymUpdate" } } }
        },
        "responses": {
          "200": { "description": "Gym updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GymResponse" } } } },
          "404": { "description": "Not found" },
          "400": { "description": "Invalid ID or validation error" }
        }
      },
      "delete": {
        "tags": ["Gyms"],
        "summary": "Delete a gym",
        "parameters": [{ "$ref": "#/components/parameters/IdParam" }],
        "responses": {
          "200": { "description": "Gym deleted", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageResponse" } } } },
          "404": { "description": "Not found" },
          "400": { "description": "Invalid ID" }
        }
      }
    },
    "/gyms/by-machine/{machineId}": {
      "get": {
        "tags": ["Gyms"],
        "summary": "List gyms that have a specific machine",
        "parameters": [
          { "$ref": "#/components/parameters/MachineIdParam" },
          { "$ref": "#/components/parameters/CityQuery" },
          { "$ref": "#/components/parameters/CountryQuery" }
        ],
        "responses": {
          "200": {
            "description": "Array of gyms"
          },
          "400": { "description": "Invalid machineId" }
        }
      }
    },
   "/gyms/link-machine": {
      "post": {
        "summary": "Link or increment a machine on a gym",
        "description": "If the machine already exists in the gym's machines array, increments quantity; otherwise adds a new subdocument.",
        "tags": ["Gyms"],
        "security": [{ "cookieAuth": [] }, { "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LinkMachineRequest" },
              "examples": {
                "default": {
                  "value": {
                    "gymId": "66f4f8c4f1b2a9341b2c0a77",
                    "machineId": "66f4fa53c9be3b4e8b1d22aa",
                    "quantity": 1,
                    "lastServicedAt": "2025-09-01T00:00:00.000Z",
                    "areaNote": "Strength zone 2"
                  }
                }
              }
            }
          }
        }
      }
    },


    "/machines": {
      "get": {
        "tags": ["Machines"],
        "summary": "List machines (optional filters)",
        "parameters": [
          { "$ref": "#/components/parameters/MachineTypeQuery" },
          { "$ref": "#/components/parameters/BrandQuery" },
          { "$ref": "#/components/parameters/NameQuery" }
        ],
        "responses": {
          "200": {
            "description": "Array of machines",
            "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Machine" } } } }
          }
        }
      },
      "post": {
        "tags": ["Machines"],
        "summary": "Create a machine",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MachineCreate" },
              "examples": {
                "default": {
                  "value": {
                    "name": "Lat Pulldown",
                    "type": "strength",
                    "brand": "TechnoGym",
                    "primaryMuscleGroups": ["back", "biceps"],
                    "isPlateLoaded": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Machine created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MachineResponse" } } } },
          "400": { "description": "Validation error" }
        }
      }
    },
    "/machines/{id}": {
      "get": {
        "tags": ["Machines"],
        "summary": "Get a machine by ID",
        "parameters": [{ "$ref": "#/components/parameters/IdParam" }],
        "responses": {
          "200": { "description": "Machine object", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Machine" } } } },
          "404": { "description": "Not found" },
          "400": { "description": "Invalid ID" }
        }
      },
      "put": {
        "tags": ["Machines"],
        "summary": "Update a machine",
        "parameters": [{ "$ref": "#/components/parameters/IdParam" }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MachineUpdate" } } }
        },
        "responses": {
          "200": { "description": "Machine updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MachineResponse" } } } },
          "404": { "description": "Not found" },
          "400": { "description": "Invalid ID or validation error" }
        }
      },
      "delete": {
        "tags": ["Machines"],
        "summary": "Delete a machine",
        "parameters": [{ "$ref": "#/components/parameters/IdParam" }],
        "responses": {
          "200": { "description": "Machine deleted", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageResponse" } } } },
          "404": { "description": "Not found" },
          "400": { "description": "Invalid ID" }
        }
      }
    },
    "/trainers/{id}": {
      "delete": {
        "tags": ["Trainers"],
        "summary": "Delete a trainer by ID",
        "operationId": "deleteTrainerById",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "$ref": "#/components/parameters/IdParam" }
        ],
        "responses": {
          "200": {
            "description": "Trainer deleted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteResponse" },
                "examples": {
                  "ok": {
                    "value": { "message": "Trainer deleted", "id": "64a7f0f4f0f0f0f0f0f0f0f9" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid trainer id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "badId": { "value": { "message": "Invalid trainer id" } }
                }
              }
            }
          },
          "404": {
            "description": "Trainer not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "notFound": { "value": { "message": "Trainer not found" } }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" },
                "examples": {
                  "serverErr": {
                    "value": { "message": "Error deleting trainer", "error": "db error details" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trainers/register": {
    "post": {
      "tags": ["Trainers"],
      "summary": "Register as a trainer (one profile per user)",
      "security": [{ "cookieAuth": [] }],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/TrainerRegister" },
            "examples": {
              "default": {
                "value": {
                  "headline": "Strength & Conditioning Coach",
                  "yearsExperience": 6,
                  "certifications": ["NASM CPT", "CSCS"],
                  "specialties": ["strength", "rehab"],
                  "hourlyRate": 60,
                  "trainingModes": ["in_person", "online"],
                  "languages": ["English", "Deutsch"],
                  "baseCity": "Frankfurt",
                  "baseCountry": "Germany",
                  "gymAffiliations": ["60f5c3c4f13a3b6b6b6b6b6b"]
                }
              }
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Registered as trainer",
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrainerResponse" } } }
        },
        "409": { "description": "User already has a trainer profile" },
        "401": { "description": "Unauthorized" }
      }
    }
  },

  "/trainers": {
    "get": {
      "tags": ["Trainers"],
      "summary": "List trainers in a city",
      "security": [{ "cookieAuth": [] }],
      "parameters": [
        { "$ref": "#/components/parameters/CityQuery" },
        { "$ref": "#/components/parameters/CountryQuery" },
        { "$ref": "#/components/parameters/MinRatingQuery" },
        { "$ref": "#/components/parameters/SpecialtiesQuery" }
      ],
      "responses": {
        "200": {
          "description": "Array of trainers",
          "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Trainer" } } } }
        },
        "401": { "description": "Unauthorized" },
        "400": { "description": "Validation error" }
      }
    }
  },

  "/trainers/me": {
    "get": {
      "tags": ["Trainers"],
      "summary": "Get my trainer profile",
      "security": [{ "cookieAuth": [] }],
      "responses": {
        "200": { "description": "Trainer document", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Trainer" } } } },
        "404": { "description": "Trainer profile not found" },
        "401": { "description": "Unauthorized" }
      }
    },
    "put": {
      "tags": ["Trainers"],
      "summary": "Update my trainer profile",
      "security": [{ "cookieAuth": [] }],
      "requestBody": {
        "required": true,
        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrainerUpdate" } } }
      },
      "responses": {
        "200": {
          "description": "Trainer updated",
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TrainerResponse" } } }
        },
        "404": { "description": "Trainer profile not found" },
        "401": { "description": "Unauthorized" },
        "400": { "description": "Validation error" }
      }
    }
  }
  },

  "components": {
    "parameters": {
      "IdParam": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
        "description": "MongoDB ObjectId"
      },
      "MachineIdParam": {
        "name": "machineId",
        "in": "path",
        "required": true,
        "schema": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
        "description": "Machine MongoDB ObjectId"
      },
      "CityQuery": {
        "name": "city",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      "CountryQuery": {
        "name": "country",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      "MachineTypeQuery": {
        "name": "type",
        "in": "query",
        "required": false,
        "schema": { "type": "string", "enum": ["cardio", "strength", "mobility", "functional", "accessory"] }
      },
      "BrandQuery": {
        "name": "brand",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      "NameQuery": {
        "name": "name",
        "in": "query",
        "required": false,
        "schema": { "type": "string" }
      },
      "MinRatingQuery": {
      "name": "minRating",
      "in": "query",
      "required": false,
      "schema": { "type": "number", "minimum": 0, "maximum": 5 },
      "description": "Minimum average rating filter"
    },
    "SpecialtiesQuery": {
      "name": "specialties",
      "in": "query",
      "required": false,
      "schema": { "type": "string" },
      "description": "Comma-separated list of specialties (e.g., strength,rehab)"
    }
    },

    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionId",
        "description": "Session cookie set after GitHub OAuth"
      }
    },

    "schemas": {
      "LinkMachineRequest": {
        "type": "object",
        "required": ["gymId", "machineId"],
        "properties": {
          "gymId": { "type": "string", "description": "Gym MongoDB ObjectId" },
          "machineId": { "type": "string", "description": "Machine MongoDB ObjectId" },
          "quantity": { "type": "integer", "minimum": 1, "default": 1 },
          "lastServicedAt": { "type": "string", "format": "date-time" },
          "areaNote": { "type": "string", "maxLength": 200 }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "User deleted" },
          "id": {
            "type": "string",
            "description": "Deleted resource id",
            "example": "64a7f0f4f0f0f0f0f0f0f0f9"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Error deleting user" },
          "error": { "type": "string", "nullable": true, "example": "db error details" }
        }
      }
    },

      "GymCreate": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": { "type": "string", "maxLength": 120 },
          "street": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "postalCode": { "type": "string" },
          "country": { "type": "string" },
          "location": { "$ref": "#/components/schemas/Point" },
          "amenities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "sauna", "steam_room", "pool", "spa", "showers", "lockers", "towels",
                "parking", "childcare", "cafe", "wheelchair_access", "wifi", "classes",
                "climbing_wall", "boxing_ring", "basketball_court", "open_24_7"
              ]
            }
          },
          "openingHours": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/OpeningHours" }
          },
          "phone": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "website": { "type": "string" },
          "priceTier": { "type": "string", "enum": ["$", "$$", "$$$"] },
          "ratingAvg": { "type": "number", "minimum": 0, "maximum": 5 },
          "ratingCount": { "type": "integer", "minimum": 0 },
          "machines": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GymMachineItem" }
          },
          "trainers": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          }
        }
      },

      "GymUpdate": {
        "allOf": [
          { "$ref": "#/components/schemas/GymCreate" }
        ],
        "description": "Same fields as create; all optional"
      },
      "BasicOkResponse": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean", "example": true }
        }
      },

      "Gym": {
        "allOf": [
          { "$ref": "#/components/schemas/GymCreate" },
          {
            "type": "object",
            "properties": {
              "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
              "createdAt": { "type": "string", "format": "date-time" },
              "updatedAt": { "type": "string", "format": "date-time" }
            }
          }
        ]
      },

      "GymResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Gym created" },
          "gym": { "$ref": "#/components/schemas/Gym" }
        }
      },

      "OpeningHours": {
        "type": "object",
        "properties": {
          "day": { "type": "string", "enum": ["mon","tue","wed","thu","fri","sat","sun"] },
          "open": { "type": "string", "example": "06:00" },
          "close": { "type": "string", "example": "22:00" }
        }
      },

      "GymMachineItem": {
        "type": "object",
        "properties": {
          "machine": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "quantity": { "type": "integer", "minimum": 0, "default": 1 },
          "lastServicedAt": { "type": "string", "format": "date-time" },
          "areaNote": { "type": "string" }
        }
      },

      "Point": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["Point"], "default": "Point" },
          "coordinates": {
            "type": "array",
            "items": { "type": "number" },
            "minItems": 2,
            "maxItems": 2,
            "example": [8.6821, 50.1109],
            "description": "[lng, lat]"
          }
        }
      },

      "MachineCreate": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": { "type": "string", "maxLength": 100 },
          "brand": { "type": "string" },
          "type": { "type": "string", "enum": ["cardio", "strength", "mobility", "functional", "accessory"] },
          "primaryMuscleGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["full_body","chest","back","shoulders","biceps","triceps","core","glutes","quads","hamstrings","calves"]
            }
          },
          "modelNumber": { "type": "string" },
          "isPlateLoaded": { "type": "boolean" },
          "maintenanceIntervalDays": { "type": "integer", "minimum": 0 },
          "notes": { "type": "string" }
        }
      },

      "MachineUpdate": {
        "allOf": [
          { "$ref": "#/components/schemas/MachineCreate" }
        ],
        "description": "Same fields as create; all optional"
      },

      "Machine": {
        "allOf": [
          { "$ref": "#/components/schemas/MachineCreate" },
          {
            "type": "object",
            "properties": {
              "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
              "createdAt": { "type": "string", "format": "date-time" },
              "updatedAt": { "type": "string", "format": "date-time" }
            }
          }
        ]
      },

      "MachineResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Machine created" },
          "machine": { "$ref": "#/components/schemas/Machine" }
        }
      },
      "TrainerRegister": {
        "type": "object",
        "properties": {
          "headline": { "type": "string", "maxLength": 120 },
          "yearsExperience": { "type": "integer", "minimum": 0, "maximum": 60 },
          "certifications": { "type": "array", "items": { "type": "string" } },
          "specialties": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "strength","hypertrophy","weight_loss","powerlifting",
                "olympic_lifting","mobility","rehab","endurance",
                "functional","prenatal","senior_fitness","sports_performance"
              ]
            }
          },
          "hourlyRate": { "type": "number", "minimum": 0 },
          "trainingModes": {
            "type": "array",
            "items": { "type": "string", "enum": ["in_person","online","hybrid"] }
          },
          "languages": { "type": "array", "items": { "type": "string" } },
          "baseCity": { "type": "string" },
          "baseCountry": { "type": "string" },
          "gymAffiliations": {
            "type": "array",
            "items": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" }
          }
        },
        "additionalProperties": false
      },

      "TrainerUpdate": {
        "allOf": [
          { "$ref": "#/components/schemas/TrainerRegister" }
        ],
        "description": "Same fields as register; all optional"
      },

      "Trainer": {
        "type": "object",
        "properties": {
          "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
          "user": {
            "type": "object",
            "description": "Populated User (subset)",
            "properties": {
              "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
              "firstName": { "type": "string" },
              "lastName": { "type": "string" },
              "avatarUrl": { "type": "string" }
            }
          },
          "headline": { "type": "string" },
          "yearsExperience": { "type": "integer" },
          "certifications": { "type": "array", "items": { "type": "string" } },
          "specialties": { "type": "array", "items": { "type": "string" } },
          "hourlyRate": { "type": "number" },
          "trainingModes": { "type": "array", "items": { "type": "string" } },
          "languages": { "type": "array", "items": { "type": "string" } },
          "ratingAvg": { "type": "number" },
          "ratingCount": { "type": "integer" },
          "baseCity": { "type": "string" },
          "baseCountry": { "type": "string" },
          "gymAffiliations": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Populated Gym (subset)",
              "properties": {
                "_id": { "type": "string", "pattern": "^[0-9a-fA-F]{24}$" },
                "name": { "type": "string" },
                "city": { "type": "string" },
                "country": { "type": "string" },
                "ratingAvg": { "type": "number" }
              }
            }
          },
          "isVerified": { "type": "boolean" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },

      "TrainerResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "example": "Registered as trainer" },
          "trainer": { "$ref": "#/components/schemas/Trainer" }
        }
      }
    }
  }
